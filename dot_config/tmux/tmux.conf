# Bindings
unbind C-b
set-option -g prefix C-space
bind-key C-space send-prefix

bind-key C-space 'send-keys C-space s Return'
bind-key x split-window -v \; resize-pane -y 30%
bind-key v split-window -h
bind-key c kill-pane
bind-key Q kill-session

bind-key g display-popup -E -w 80% -h 80% lazygit
bind-key k display-popup -E -w 80% -h 80% k9s

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator

# decide whether we're in a Vim process
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j' 'select-pane -L'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k' 'select-pane -D'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l' 'select-pane -U'
bind-key -n 'M-m' if-shell "$is_vim" 'send-keys M-m' 'select-pane -R'

# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"
# 
# bind-key -n 'C-Space' if-shell "$is_vim" 'send-keys C-Space' 'select-pane -t:.+'
# 
# bind-key -T copy-mode-vi 'C-h' select-pane -L
# bind-key -T copy-mode-vi 'C-j' select-pane -D
# bind-key -T copy-mode-vi 'C-k' select-pane -U
# bind-key -T copy-mode-vi 'C-l' select-pane -R
# bind-key -T copy-mode-vi 'C-\' select-pane -l
# bind-key -T copy-mode-vi 'C-Space' select-pane -t:.+

# Options
set -g status off
set -g mouse on
set -gq allow-passthrough on # For image nvim
set-option -g set-titles on
set-option -g set-titles-string "#S / #W"
set-option -g detach-on-destroy off
set-option -a terminal-features 'foot:RGB'
# Pnugins
set -g @plugin 'tmux-plugins/tpm'

set -g @plugin 'tmux-plugins/tmux-sensible'

# set -g @plugin '27medkamal/tmux-session-wizard'
# set -g @session-wizard 's'
# set -g @plugin 'tmuxinator/tmuxinatorn
#
# set -g @plugin 'LoricAndre/tmux-sessionx'
#

# set -g @sessionx-bind 'C-s'
# run ~/src/perso/tmux-sessionx/sessionx.tmux
# run ~/src/foss/omerxx/tmux-sessionx/sessionx.tmux
#
# # By default, tmux `<prefix>` key needs to pressed before `<mykey>` to launch
# # sessionx. In case you just want to bind '<mykey>' without the tmux '<prefix>'
# # add the following line to turn the prefix off. This option is set to
# # on by defaut.
# # set -g @sessionx-prefix on
#
# # `C-x` is customizeable, by default it indexes directories in `$HOME/.config`,
# # but this can be changed by adding the config below.
# # e.g. set -g @sessionx-x-path '~/dotfiles'
# set -g @sessionx-x-path '~/src'
# set -g @sessionx-custom-paths ''
# set -g @sessionx-custom-paths-subdirectories 'false'
# set -g @sessionx-fzf-builtin-tmux 'on'
# set -g @sessionx-filter-current 'false'
#
# # When set to 'on' a non-result will be sent to zoxide for path matching
# # Requires zoxide installed
# set -g @sessionx-zoxide-mode 'on'
#
# # With Tmuxinator turned 'on' (off by default), the plugin will take a given name
# # and look for a tmuxinator project with that name.
# # If found, it'll launch the template using tmuxinator
set -g @sessionx-tmuxinator-mode 'on'

# Custom sessions
bind-key "C-d" new-session -A -s _dadbod -- nvim +DBUI
bind-key "C-k" new-session -A -s _k9s -- k9s

# Sesh
bind-key "C-space" run-shell "sesh connect \"$(fzf-sesh)\""
bind-key "space" run-shell "sesh last"

# TPM
set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.local/share/tmux/plugins'

run '/usr/share/tmux-plugin-manager/tpm'
