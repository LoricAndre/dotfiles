export GOPATH=$HOME/.local/share/go
export PATH=$HOME/bin:$HOME/.local/bin:/opt/texlive/2020/bin/x86_64-linux:$PATH:$HOME/.npm-packages/bin:/usr/lib/ruby/gems/2.7.0:$HOME/.gem/ruby/2.7.0:$HOME/.cargo/bin:$GOPATH/bin
export LANG=en_US.UTF-8
export EDITOR=nvim
export VISUAL=nvim
export VIMRUNTIME=/usr/share/nvim/runtime


# Fix keys
typeset -g -A key
set -o emacs
key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"      beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"       end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"    overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}" backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"    delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"        history-search-backward
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"      history-search-forward
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"      backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"     forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"    beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"  end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}" reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
  autoload -Uz add-zle-hook-widget
  function zle_application_mode_start { echoti smkx }
  function zle_application_mode_stop { echoti rmkx }
  add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
  add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

bindkey "^[[1;5D" backward-word
bindkey "^[[1;5C" forward-word
bindkey "\033[127;5u" backward-kill-word
bindkey -r "^[j"
bindkey -r "^[k"
bindkey -r "^[l"
bindkey -r "^[m"

# History
HISTFILE=~/.zhistory
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory
setopt EXTENDED_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS
setopt HIST_BEEP

# Compinit
fpath=($HOME/bin /usr/share/zsh/site-functions $fpath)
autoload -Uz compinit
compinit


fpath=($fpath "/home/loric/.zfunctions")
autoload -U promptinit; promptinit
# Antigen
if [ -f $HOME/.antigen.zsh ]; then
  . $HOME/.antigen.zsh
  antigen use oh-my-zsh
  antigen bundle zsh-users/zsh-autosuggestions
  antigen bundle zsh-users/zsh-syntax-highlighting
  antigen bundle zsh-users/zsh-completions
  antigen bundle zsh-users/zsh-history-substring-search
  antigen bundle git
  antigen bundle agkozak/zsh-z
  antigen bundle birdhackor/zsh-exa-ls-plugin@main
  antigen bundle 3v1n0/zsh-bash-completions-fallback
  antigen bundle cpitt/zsh-dotenv
  antigen apply
else
  read -k 1 "install_antigen?Antigen is not installed, do you wish to install it [Yn]? "
  [[ $install_antigen =~ "[Nn]" ]] || curl -L git.io/antigen > $HOME/.antigen.zsh
fi

# # Prompt & more
# function preexec() {
#   timer=$(($(date +%s%3N)))
# }
#
# function precmd() {
#   if [ $timer ]; then
#     now=$(($(date +%s%3N)))
#     ms=$(($now-$timer))
#     to_m=$((ms / 60000))
#     s=$(bc <<< "scale=2; ($ms - $to_m * 60000) / 1000")
#     h=$((to_m / 60))
#     m=$((to_m - 60*h))
#     t="$s"
#     if (( m > 0 )); then
#       t="$m:$t"
#       if (( h > 0 )); then
#         t="$h:$t"
#       fi
#     fi
#     export RPROMPT="%F{cyan}󰥔 ${t}s %{$reset_color%}"
#     unset timer
#   else
#     export RPROMPT=""
#   fi
# }
#
export DISABLE_AUTO_TITLE="true"
function precmd () {
  print -Pn "\e]0; - zsh\a"
  if [[ -f "$PWD/.venv/bin/activate" ]]; then
    source "$PWD/.venv/bin/activate"
  else
    deactivate >/dev/null 2>&1 || true
  fi
}

_battery() {
  dir="/sys/class/power_supply/BAT0"
  if [ -d "$dir" ]; then
    _label=$(\cat "$dir/capacity")
    _status=$(\cat "$dir/status")
  else
    return 2
  fi
  if [[ $_status != Charging ]]; then
    if (( $_label == 100 )); then
      icon="󰁹 "
    elif (( $_label >= 90 )); then
      icon="󰂂 "
    elif (( $_label >= 80 )); then
      icon="󰂁 "
    elif (( $_label >= 70 )); then
      icon="󰂀 "
    elif (( $_label >= 60 )); then
      icon="󰁿 "
    elif (( $_label >= 50 )); then
      icon="󰁾 "
    elif (( $_label >= 40 )); then
      icon="󰁽 "
    elif (( $_label >= 30 )); then
      icon="󰁽 "
    elif (( $_label >= 20 )); then
      icon="󰁻 "
    elif (( $_label >= 10 )); then
      icon="󰁺 "
    else icon="󰂃 "
    fi
  else
    icon="󰂉 "
  fi
  printf "%s%s%%" "$icon" "$_label"
}

_clock() {
  _d=$(date "+%H:%M")
  printf "%s" "$_d"
}

export RPROMPT='%F{cyan}$(_battery)%%  $(_clock) %F{$reset_color%}'

set -o PROMPT_SUBST
export PROMPT='%B%F{blue}%~ %F{yellow}$(git symbolic-ref --short HEAD 2> /dev/null) %(?.%F{green}󰄾.%F{red}✗)%f%b '
set -o monitor

export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=14"

[ -z $ZDOTDIR ] && ZDOTDIR=$HOME
. $ZDOTDIR/.zshaliases
. $ZDOTDIR/.zshcompletions
[ -f /usr/share/nvm/init-nvm.sh ] && source /usr/share/nvm/init-nvm.sh

export THEFUCK_EXCLUDE_RULES="fix_file"
[ -x $(which thefuck) ] && eval $(thefuck --alias f)
